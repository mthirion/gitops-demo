apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"tekton.dev/v1beta1","kind":"Task","metadata":{"annotations":{"tekton.dev/pipelines.minVersion":"0.12.1","tekton.dev/tags":"image-build"},"labels":{"app.kubernetes.io/version":"0.1","operator.tekton.dev/provider-type":"redhat"},"managedFields":[{"apiVersion":"tekton.dev/v1beta1","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:annotations":{".":{},"f:kubectl.kubernetes.io/last-applied-configuration":{},"f:tekton.dev/pipelines.minVersion":{},"f:tekton.dev/tags":{}},"f:labels":{".":{},"f:app.kubernetes.io/version":{},"f:operator.tekton.dev/provider-type":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"3a412d84-bcaa-4720-8cd8-05aec01b139b\"}":{}}},"f:spec":{".":{},"f:description":{},"f:params":{},"f:results":{},"f:steps":{},"f:volumes":{},"f:workspaces":{}}},"manager":"manifestival","operation":"Update","time":"2022-06-07T10:40:16Z"}],"name":"buildah-crossenv","namespace":"pipelines"},"spec":{"description":"Buildah task builds source into a container image and then pushes it to a container registry.\nBuildah Task builds source into a container image using Project Atomic's Buildah build tool.It uses Buildah's support for building from Dockerfiles, using its buildah bud command.This command executes the directives in the Dockerfile to assemble a container image, then pushes that image to a container registry.\nBuildah Task can push to the same namespace only without authentication. This Task includes authentication so can be used to push to a different env","params":[{"description":"Reference of the image buildah will produce.","name":"IMAGE","type":"string"},{"default":"registry.redhat.io/rhel8/buildah@sha256:e19cf23d5f1e0608f5a897f0a50448beb9f8387031cca49c7487ec71bd91c4d3","description":"The location of the buildah builder image.","name":"BUILDER_IMAGE","type":"string"},{"default":"vfs","description":"Set buildah storage driver","name":"STORAGE_DRIVER","type":"string"},{"default":"./Dockerfile","description":"Path to the Dockerfile to build.","name":"DOCKERFILE","type":"string"},{"default":".","description":"Path to the directory to use as context.","name":"CONTEXT","type":"string"},{"default":"true","description":"Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)","name":"TLSVERIFY","type":"string"},{"default":"oci","description":"The format of the built container, oci or docker","name":"FORMAT","type":"string"},{"default":"","description":"Extra parameters passed for the build command when building images.","name":"BUILD_EXTRA_ARGS","type":"string"},{"default":"","description":"Extra parameters passed for the push command when pushing images.","name":"PUSH_EXTRA_ARGS","type":"string"}],"results":[{"description":"Digest of the image just built.","name":"IMAGE_DIGEST"}],"steps":[{"image":"$(params.BUILDER_IMAGE)","name":"build","resources":{},"script":"buildah --storage-driver=$(params.STORAGE_DRIVER) bud \\\n  $(params.BUILD_EXTRA_ARGS) --format=$(params.FORMAT) \\\n  --tls-verify=$(params.TLSVERIFY) --no-cache \\\n  -f $(params.DOCKERFILE) -t $(params.IMAGE) $(params.CONTEXT)\n","volumeMounts":[{"mountPath":"/var/lib/containers","name":"varlibcontainers"}],"workingDir":"$(workspaces.source.path)"},{"env":[{"name":"REGISTRY_AUTH_FILE","value":"/home/builder/.docker/config.json"}],"image":"$(params.BUILDER_IMAGE)","name":"push","resources":{},"script":"buildah --storage-driver=$(params.STORAGE_DRIVER) push \\\n  $(params.PUSH_EXTRA_ARGS) --tls-verify=$(params.TLSVERIFY) \\\n  --digestfile $(workspaces.source.path)/image-digest $(params.IMAGE) \\\n  docker://$(params.IMAGE)\n","volumeMounts":[{"mountPath":"/var/lib/containers","name":"varlibcontainers"}],"workingDir":"$(workspaces.source.path)"},{"image":"$(params.BUILDER_IMAGE)","name":"digest-to-results","resources":{},"script":"cat $(workspaces.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST"}],"volumes":[{"emptyDir":{},"name":"varlibcontainers"}],"workspaces":[{"name":"source"}]}}
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: image-build
  labels:
    app.kubernetes.io/version: "0.1"
    operator.tekton.dev/provider-type: redhat
  name: buildah-crossenv
spec:
  description: |-
    Buildah task builds source into a container image and then pushes it to a container registry.
    Buildah Task builds source into a container image using Project Atomic's Buildah build tool.It uses Buildah's support for building from Dockerfiles, using its buildah bud command.This command executes the directives in the Dockerfile to assemble a container image, then pushes that image to a container registry.
    Buildah Task can push to the same namespace only without authentication. This Task includes authentication so can be used to push to a different env
  params:
  - default: development
    description: Target environment for the image
    name: TARGET_ENV
    type: string
  - description: Application name
    name: appname
    type: string
  - default: latest
    description: Application version (for image tag)
    name: APP_VERSION
    type: string
  - default: registry.redhat.io/rhel8/buildah@sha256:e19cf23d5f1e0608f5a897f0a50448beb9f8387031cca49c7487ec71bd91c4d3
    description: The location of the buildah builder image.
    name: BUILDER_IMAGE
    type: string
  - default: vfs
    description: Set buildah storage driver
    name: STORAGE_DRIVER
    type: string
  - default: ./Dockerfile
    description: Path to the Dockerfile to build.
    name: DOCKERFILE
    type: string
  - default: .
    description: Path to the directory to use as context.
    name: CONTEXT
    type: string
  - default: "true"
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS
      registry)
    name: TLSVERIFY
    type: string
  - default: oci
    description: The format of the built container, oci or docker
    name: FORMAT
    type: string
  - default: ""
    description: Extra parameters passed for the build command when building images.
    name: BUILD_EXTRA_ARGS
    type: string
  - default: ""
    description: Extra parameters passed for the push command when pushing images.
    name: PUSH_EXTRA_ARGS
    type: string
  results:
  - description: Digest of the image just built.
    name: IMAGE_DIGEST
  steps:
  - image: $(params.BUILDER_IMAGE)
    name: build
    resources: {}
    script: |
      buildah --storage-driver=$(params.STORAGE_DRIVER) bud \
        $(params.BUILD_EXTRA_ARGS) --format=$(params.FORMAT) \
        --tls-verify=$(params.TLSVERIFY) --no-cache \
        -f $(params.DOCKERFILE) -t image-registry.openshift-image-registry.svc:5000/$(params.TARGET_ENV)/$(params.appname):$(params.APP_VERSION) $(params.CONTEXT)
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    workingDir: $(workspaces.source.path)
  - env:
    - name: REGISTRY_AUTH_FILE
      value: /root/.docker/config.json
    image: $(params.BUILDER_IMAGE)
    name: push
    resources: {}
    script: |
      buildah --storage-driver=$(params.STORAGE_DRIVER) --tls-verify=$(params.TLSVERIFY) --authfile /root/.docker/config.json --digestfile $(workspaces.source.path)/image-digest push $(params.PUSH_EXTRA_ARGS) image-registry.openshift-image-registry.svc:5000/$(params.TARGET_ENV)/$(params.appname):$(params.APP_VERSION)
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    workingDir: $(workspaces.source.path)
  - image: $(params.BUILDER_IMAGE)
    name: digest-to-results
    resources: {}
    script: cat $(workspaces.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST
  volumes:
  - emptyDir: {}
    name: varlibcontainers
  workspaces:
  - name: source
